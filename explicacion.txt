# Explicación del Proyecto: Simulador de Gacha con Node.js, Express y WebSockets

Este proyecto es un simulador de sistema de "gacha" (similar a las cajas de botín o sorteos en videojuegos) implementado con Node.js, Express y WebSockets. Permite a los usuarios realizar tiradas, gestionar su inventario, y realizar intercambios, todo ello con una interfaz web y un panel de administración.

## 1. Estructura del Proyecto

El proyecto está organizado en las siguientes carpetas principales:

*   `app.js`: El punto de entrada principal del servidor.
*   `src/`: Contiene la lógica del servidor, rutas y servicios.
    *   `src/config/`: Archivos de configuración (ej. `multerConfig.js` para subida de archivos).
    *   `src/routes/`: Define las rutas de la API (admin, gacha, trades).
    *   `src/services/`: Contiene la lógica de negocio y la interacción con los datos (dataManager, gachaService, tradeService).
    *   `src/utils/`: Utilidades, como la gestión de WebSockets.
*   `GachaWish/`: Almacena todos los datos persistentes del sistema de gacha.
    *   `GachaWish/currency_data.json`: Datos de la moneda del juego.
    *   `GachaWish/latest_pull.json`: Información de la última tirada.
    *   `GachaWish/pity_data.json`: Datos de "pity" (probabilidades aumentadas tras tiradas fallidas).
    *   `GachaWish/trade_history.json`: Historial de intercambios.
    *   `GachaWish/trades.json`: Intercambios activos.
    *   `GachaWish/user_data.json`: Datos de los usuarios (pity, etc.).
    *   `GachaWish/user_inventory.json`: Inventario de personajes de cada usuario.
    *   `GachaWish/gacha_data/`: Contiene la configuración de banners y personajes.
        *   `GachaWish/gacha_data/banners/`: Definición de banners (estándar, de temporada).
        *   `GachaWish/gacha_data/characters/`: Archivos JSON con los detalles de cada personaje.
*   `web/`: Contiene la interfaz de usuario (frontend) y recursos estáticos.
    *   `web/admin.html`: Panel de administración.
    *   `web/index.html`: Interfaz principal del gacha.
    *   `web/trades.html`: Interfaz para intercambios.
    *   `web/css/`: Archivos CSS para estilos.
    *   `web/img/`: Imágenes del proyecto (personajes, iconos, etc.).
    *   `web/js/`: Archivos JavaScript del lado del cliente.
    *   `web/sounds/`: Archivos de sonido para eventos del gacha.
*   `package.json`: Define las dependencias del proyecto y scripts.
*   `iniciar.bat`: Script de Windows para iniciar el servidor.
*   `backup_inventario.bat`: Script de Windows para realizar copias de seguridad del inventario.
*   `Comandos admin.txt`: Documentación de comandos de administración.
*   `streamerbot_instructions.txt`: Instrucciones para la integración con Streamer.bot.

## 2. Componentes Clave y Funcionalidades

### 2.1. Servidor (Node.js/Express)

*   **`app.js`**: Configura el servidor Express, maneja las rutas estáticas (`web/`), inicializa el servidor WebSocket y carga las rutas de la API.
*   **Rutas de la API (`src/routes/`)**:
    *   `adminRoutes.js`: Rutas para el panel de administración, permitiendo la gestión de personajes, banners y otros aspectos del gacha.
    *   `gachaRoutes.js`: Rutas para las operaciones de gacha, como `/pull-single` y `/pull-multi`.
    *   `tradeRoutes.js`: Rutas para la gestión de intercambios entre usuarios.
*   **Servicios (`src/services/`)**:
    *   `dataManager.js`: Encargado de leer y escribir los archivos JSON de datos del proyecto, asegurando la persistencia.
    *   `gachaService.js`: Contiene la lógica principal del sistema de gacha, incluyendo la selección de personajes, el cálculo de probabilidades, la gestión del "pity" y la actualización del inventario del usuario.
    *   `tradeService.js`: Implementa la lógica para crear, aceptar y gestionar intercambios entre usuarios.
*   **WebSockets (`src/utils/websocket.js`)**: Gestiona las conexiones WebSocket, permitiendo la comunicación en tiempo real entre el servidor y los clientes (ej. la interfaz web o una superposición de transmisión). Se utiliza para enviar actualizaciones sobre las tiradas de gacha, intercambios, etc.

### 2.2. Sistema de Gacha

El corazón del proyecto reside en la lógica de gacha, que se activa a través de las rutas `gachaRoutes.js` y el `gachaService.js`.

*   **`/pull-single?user=%user%`**:
    *   **Propósito**: Realiza una única tirada de gacha para el usuario especificado.
    *   **Parámetro `%user%`**: Identifica al usuario que realiza la tirada.
    *   **Proceso**: El `gachaService` calcula la rareza y selecciona un personaje basándose en las probabilidades definidas en `web/gacha_config.json` y los datos de "pity" del usuario (`GachaWish/user_data.json`, `GachaWish/pity_data.json`). El inventario del usuario (`GachaWish/user_inventory.json`) y los contadores de "pity" se actualizan y se guardan. El resultado se envía a través de WebSockets.
*   **`/pull-multi?user=%user%`**:
    *   **Propósito**: Realiza múltiples tiradas (actualmente 5) para el usuario especificado.
    *   **Proceso**: Llama repetidamente a la lógica de `pull-single`, actualizando el estado del usuario y el inventario después de cada tirada. Los resultados de todas las tiradas se recopilan y se envían en un único mensaje WebSocket.

### 2.3. Interfaz Web (`web/`)

Proporciona la interacción visual con el sistema:

*   **`index.html`**: La página principal donde los usuarios pueden realizar tiradas de gacha y ver los resultados.
*   **`admin.html`**: Un panel protegido para administradores, que permite subir nuevos personajes, configurar banners, gestionar usuarios, etc.
*   **`trades.html`**: Una interfaz para que los usuarios puedan ver, crear y aceptar intercambios de personajes.
*   Los archivos JavaScript (`web/js/`) manejan la lógica del lado del cliente, la interacción con la API del servidor y la comunicación WebSocket.
*   Los archivos CSS (`web/css/`), imágenes (`web/img/`) y sonidos (`web/sounds/`) proporcionan la experiencia visual y auditiva.

## 3. Archivos de Datos y Configuración Importantes

*   **`GachaWish/user_data.json`**: Almacena los contadores de "pity" y otros datos específicos de cada usuario. Se actualiza después de cada tirada.
*   **`GachaWish/user_inventory.json`**: Guarda el inventario de personajes de cada usuario.
*   **`web/gacha_config.json`**: Contiene la configuración general del sistema de gacha, incluyendo probabilidades de rareza, reglas de banners y otros parámetros.
*   **`GachaWish/gacha_data/characters/*.json`**: Cada archivo JSON en esta carpeta describe un personaje individual, incluyendo su nombre, rareza, descripción y ruta de imagen.

## 4. Cómo Iniciar el Proyecto

1.  Asegúrate de tener Node.js instalado.
2.  Abre una terminal en la raíz del proyecto.
3.  Instala las dependencias: `npm install`
4.  Inicia el servidor: `node app.js` o ejecuta el script `iniciar.bat`.
5.  Accede a la interfaz web a través de `http://localhost:8085/` en tu navegador.
